Yalco - RxJS 강의 OT

ReactiveX : 반응형 라이브러리 대표격 그중 JS 용이 RxJS

반응형 프로그래밍이란?

ReactiveX?

함수형 프로그래밍(Functional Programming) - 반응형 프로그래밍 단짝
>> 코딩 중 오류의 소지가 될 법한 변수의 사용을 지양하고 순수함수를 사용한 프로그래밍을 하는것 

ex> const nums = [1,2,3,4,5,6,7,8,9,10]; 에서 / 짝수만 선택 / 첫 3개 수만 선택 / 제곱해서 / 문자열로 합치는 연산을 수행할 때
	let count = 0; let result = '';
	for (let i = 0; i < nums.length - 1 && count 5; i++) {
		if(nums[i] % 2 === 0) {
			result += (result === '' ? '' : ', ') + Math.pow(nums[i], 2);
			count++; 
		}
	}
	로 변수 count, result, i 등 프로그래밍 실행 중 값이 변동되는 상태값으로 작용하는 변수를 사용할 경우, (변수 ~로 ...를 해라 : 동사 명령형 프로그램)
	프로그램 규모가 커지면 노출된 변수들은 위험요소가 될 수 있음
	>> 협업 코딩 중 헷갈린다거나, 
	특히 멀티스레드에서 둘 이상의 스레드가 한 변수에 동시 접근할 때 조치가 제대로 안되면 위험

	console.log (
		nums
		.filter(n => n%2 === 0)
		.slice(0, 5)
		.map(n => Math.pow(n, 2))
		.join(',' )
	)

	이렇게 함수들을 사용해 받아온 값을 내부에서 처리해 외부로 반환시키는 것을 연쇄작용 시켜 프로그래밍함 (~는 ... 과정을 거친 XX다 : 선언형태 > 선언형 프로그래밍 특성)
	물론 내부적으로는 변수가 사용되나 최대한 캡슐화가 가능
	
	그리고 이런 함수들은 직접 알고리즘을 구현한다기 보단, 언어나 라이브러리들에서 주어지는 순수 함수들 사용

ReactiveX는 이 함수형 프로그래밍의 골격을 갖춤
ReactiveX의 3골격
1) Observable : 일련(이 흐름은 stream)의 데이터들을 발행 - 관찰대상 
2) Operator(위 stream이 지나는 pipe) : 연산자(순수함수) 위 Observable의 stream 연산
3) Observer : 위 연산 결과를 기다리며 주시하다(subscribe) 최종 작업 실행(구독자가 발행물에 '반응'하는 것)

ReactiveX 사용 이유 (위 순수함수들은 JS, 기존 JS 라이브러리도 있는데?)
위 ReactiveX에서는 시간의 흐름, 사용자 동작, 네트워크 요청 결과 등도 전부 전부 stream으로 만들 수 있음

예를 들어 ajax().pipe로 필터링도 됨

'시간의 흐름에 따라 생겨나는 값들을' '배열이나 리스트를 다루듯 처리가 가능'
>> 따라서 시간과 관련된 순수함수들이 ReactiveX에 많음

ex)	delay() : 발행물이 pipe 안에서 주어진 시간동안 기다렸다가 나오게 함
 	timeinterval() : 이전 발행물과 시간차를 얻어옴
	debounceTime() : 주어진 시간 동안 다음 값이 들어오지 않아야 해당 값이 발행
>> 각종 비동기 작업이나 애니메이션에 유효함

ex)	1~20의 배열 값을 Ajax요청할 시 서버의 상태문제로(응답에 1초 시간지연 / 25%확율 오류)
	Ajax 요청 전송 실패 각 최대 3번까지 재요청 / 서버과부하 방지를 위해 최대 4개 제한 / 처리가 될때마다 다음 대기열이 요청됨 / 반환 값을 모두 모아 배열로 반환

	range(1, 20).pipe( // range()로 1~20 숫자 스트림 생성
		mergeMap(index => ajax( // mergeMap()으로 위의 스트림의 각 값에 지정된 다른 스트림 만들어냄 (여기서는 Ajax 요청 스트림)
			`http://~~~~/${index}`
			).pipe(
				pluck('response', 'first_name'), // 받아온 JSON 객체를 pluck으로 정제(response key의 first_name key의 value만 '뽑음(pluck)')
				retry(3) // 요청 실패시 n회 재시도를 위한 함수
			)		
			, 4), // mergeMap은 스트림을 동시 실행시키는데 한번에 실행가능 개수 제한 가능 + mergeMap파생 스트림 발행물은 한 스트림으로 병합되 최종 발행
			toArray() // 스트림의 모든 값을 발행되기를 기다리다 배열로 반환
	).subscribe(console.log)

각 결과에 무엇을 해야할지 선언하기에

반응형 함수형 선언형은 거의 같이 감

>>암튼 제일 중요한 것 스트림 : 구현하고자 하는 객체의 흐름을 재해석할 수 있어야 함

fromEvent(document, 'click') >> 이벤트로부터 스트림 발생 (click이나 keydown등)
keydown의 경우 pluck('key')로 기를 받아서 filter(k=>k.includes('Arrow'))로 방향키만 뽑아오기 가능
또안 map(k=>{ return { ArrowDown: 1, ArrowUp: -1, ArrowLeft: -1, ArrowRight: 1}[k] }) 등 각 방향에 대한 값도 매핑 가능함 

const scroll$ = merge( >> 각 이벤트 스트림 병합해줌
	fromEvent(document, 'mousewheel'),
	fromEvent(document, 'wheel'),
).pipe(
	throttleTime(1000), >> 주어진 시간동안 하나의 값만 통과하게 함 : 위 이벤트를 브라우저가 둘다 받는 경우 고려
	map(s => s.deltaY > 0 ? 1 : -1)
)

const input$ = merge (
	keypress$, scroll$ //어디서 온 입력값인지 구독자는 알 필요 없음
).pipe(startWith(0)) //스트림의 시작부분의 프로그램에 실행시 바로 발행하느 값을 넣을 수 있음

spaces 빈문자열
lines 텍스트 배열

const spaces$ = range(0, spaces).pipe(mapTo('')) // 앞 뒤 빈문자열 스트림

const lines$ = concat( // 각 요소 이어붙임
	spaces$, from(lines), spaces$
).pipe(
	bufferCount(spaces * 2 + 1, 1), // 스트림을 앞의 파라미터만큼 떼어(뭉치로) 뒤의 파라미터만큼 이동하며 반복
	skipLast(spaces * 2), // 끝에서 인자만큼을 제거 (위에서 뭉치로 다닌만큼 마지막에는 점점 공백이 생기므로)
	toArray()
)

const fianl$$ = input$.pipe(
	scan((acc, cur) => { // 스트림의 누적값을 발행시킴
		return Math.min(Math.max(acc += cur, 0), lines.length -1) // 최댓값, 최솟값 제한
	}),
	mergeMap(cursor => {
		return lines$.pipe(
			map(buffereds => buffereds[cursor])
		)
	})
)

반응형 작업이 항상 코드가 짧아지는건 아님
스트림을 생성하고 조합해서 상수로 선언하는 것으로 코드가 끝냄